{"version":3,"sources":["signup-from/text-input.jsx","signup-from/form.jsx","signup-from/index.jsx","app.jsx","serviceWorker.js","index.js"],"names":["TextInput","props","className","label","type","name","placeholder","value","error","onChange","handler","defaultProps","Form","values","agreement","handleChange","handleCheckbox","handleSubmit","errors","onSubmit","email","password","style","color","fontSize","gender","checked","disabled","SignupForm","state","event","setState","target","preventDefault","validator","isValid","reset","console","log","createUser","Object","keys","length","width","fontFamily","this","Component","Test","users","user","id","Date","getTime","toString","map","key","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7053a2df.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst TextInput = props => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label>{props.label}</label>\r\n            <input \r\n                type={props.type} \r\n                name={props.name}\r\n                placeholder={props.placeholder} \r\n                value={props.value}\r\n                className={props.error ? 'form-control is-invalid' : 'form-control'}\r\n                onChange={props.handler}\r\n            />\r\n            <div className=\"invalid-feedback\">{props.error}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInput.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    handler: PropTypes.func.isRequired,\r\n    error: PropTypes.string.isRequired\r\n}\r\nTextInput.defaultProps = {\r\n    label: '',\r\n    type: 'text',\r\n    placeholder: '',\r\n    error: ''\r\n}\r\nexport default TextInput","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TextInput from './text-input'\r\n\r\nconst Form = ({values, agreement, handleChange, handleCheckbox, handleSubmit, errors}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className='p-5 shadow-lg mb-3'>\r\n            <TextInput \r\n                label='Enter name'\r\n                name=\"name\" \r\n                placeholder='Mr. John' \r\n                value={values.name}\r\n                handler={handleChange}\r\n                error={errors.name}\r\n            />\r\n\r\n            <TextInput\r\n                label='Enter email'\r\n                type=\"email\" \r\n                name=\"email\" \r\n                placeholder='test@test.com' \r\n                value={values.email}\r\n                handler={handleChange}\r\n                error={errors.email}\r\n            />\r\n\r\n            <TextInput \r\n                label='Enter password'\r\n                type=\"password\" \r\n                name=\"password\" \r\n                placeholder='********' \r\n                value={values.password}\r\n                handler={handleChange}\r\n                error={errors.password}\r\n            />\r\n\r\n            <div className='form-group'>   \r\n                <p className='mb-1'>Select Gender</p>\r\n                <label className='mr-3'>\r\n                    <input type=\"radio\"  name=\"gender\" onChange={handleChange} value='Male'/>\r\n                    <span className=\"ml-1\">Male</span>\r\n                </label>\r\n                <label className='mr-3'>\r\n                    <input type=\"radio\" name=\"gender\" onChange={handleChange} value='Female'/>\r\n                    <span className=\"ml-1\">Female</span>\r\n                </label>\r\n                <label className='mr-3'>\r\n                    <input type=\"radio\" name=\"gender\" onChange={handleChange} value='Other'/>\r\n                    <span className=\"ml-1\">Other</span>\r\n                </label>\r\n                <div style={{color: '#dc3545',fontSize: '80%'}}>{errors.gender && errors.gender}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"agreement\"\r\n                    checked={agreement}\r\n                    onChange={handleCheckbox}\r\n                /> I agree with all terms and condition.\r\n            </div>\r\n            <button className=\"btn btn-primary mt-3\" disabled={!agreement}>Create User</button>\r\n        </form>\r\n    )\r\n}\r\nForm.propTypes = {\r\n    values: PropTypes.object.isRequired,\r\n    agreement: PropTypes.bool.isRequired,\r\n    handleChange: PropTypes.func.isRequired,\r\n    handleCheckbox: PropTypes.func.isRequired,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\nexport default Form","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Form from './form'\r\n\r\nclass SignupForm extends Component {\r\n    state = {\r\n        values: {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            gender: ''\r\n        },\r\n        agreement: false,\r\n        errors: {}\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({values: {...this.state.values, [event.target.name]: event.target.value}})\r\n    }\r\n    handleCheckbox = event => {\r\n        this.setState({agreement: event.target.checked})\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        let {errors, isValid} = this.validator()\r\n        if(isValid) {\r\n            event.target.reset()\r\n            console.log(this.state.values)\r\n            this.props.createUser(this.state.values)\r\n\r\n            this.setState({values: {name:'',email:'',password:'',gender:''}, agreement: false, errors:{}})\r\n        } else {\r\n            this.setState({errors})\r\n        }\r\n    }\r\n    validator = () => {\r\n        let errors = {}\r\n        const {name, email, password, gender} = this.state.values\r\n        if(!name) {\r\n            errors.name = 'Please provide your name'\r\n        }\r\n        if(!email) {\r\n            errors.email = 'Please provide your email'\r\n        }\r\n        if(!password) {\r\n            errors.password = 'Please provide your password'\r\n        }\r\n        if(!gender) {\r\n            errors.gender = 'Please provide your gender'\r\n        }\r\n        return {\r\n            errors,\r\n            isValid: Object.keys(errors).length === 0\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{width: '500px'}} className='m-auto pt-5'>\r\n                <h3 className='text-danger text-center' style={{fontFamily: 'fira code'}}>Signup Form</h3><hr/>\r\n                <Form \r\n                    values={this.state.values}\r\n                    agreement={this.state.agreement}\r\n                    handleChange={this.handleChange}\r\n                    handleCheckbox={this.handleCheckbox}\r\n                    handleSubmit={this.handleSubmit}\r\n                    errors={this.state.errors}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nSignupForm.propTypes = {\r\n    createUser: PropTypes.func.isRequired\r\n}\r\nexport default SignupForm","import React from 'react'\r\nimport SignupForm from './signup-from/'\r\n\r\nclass Test extends React.Component {\r\n    state = {\r\n        users: []\r\n    }\r\n    createUser = user => {\r\n        user.id = new Date().getTime().toString()\r\n        this.setState({users: [...this.state.users, user]})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <SignupForm \r\n                    createUser = {this.createUser}\r\n                />\r\n                <div className=\"offset-3\">\r\n                    <h2 className='ml-4 mt-4'>Register User List</h2>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {this.state.users.map(user => (\r\n                            <li key={user.id} className='list-group-item'>\r\n                                <h4>\r\n                                    <span className='text-dark'>Name: </span>\r\n                                    <span className='text-danger'>{user.name}</span>\r\n                                    <span className='text-dark'> Email: </span>\r\n                                    <span className='text-danger'>{user.email}</span>\r\n                                </h4>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Test","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './app'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\nserviceWorker.unregister();\n"],"sourceRoot":""}